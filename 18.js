/*

  Santa Claus tiene una agenda m치gica 游늲 donde guarda las direcciones de los ni침os para entregar los regalos. El problema: la informaci칩n de la agenda est치 mezclada y malformateada. Las l칤neas contienen un n칰mero de tel칠fono m치gico, el nombre de un ni침o y su direcci칩n, pero todo est치 rodeado de caracteres extra침os.
  
  Santa necesita tu ayuda para encontrar informaci칩n espec칤fica de la agenda. Escribe una funci칩n que, dado el contenido de la agenda y un n칰mero de tel칠fono, devuelva el nombre del ni침o y su direcci칩n.
  
  Ten en cuenta que en la agenda:
  
  Los n칰meros de tel칠fono est치n formateados como +X-YYY-YYY-YYY (donde X es uno o dos d칤gitos, e Y es un d칤gito).
  El nombre de cada ni침o est치 siempre entre < y >
  La idea es que escribas una funci칩na que, pas치ndole el tel칠fono completo o una parte, devuelva el nombre y direcci칩n del ni침o. Si no encuentra nada o hay m치s de un resultado, debes devolver null.
  
  const agenda = `+34-600-123-456 Calle Gran Via 12 <Juan Perez>
  Plaza Mayor 45 Madrid 28013 <Maria Gomez> +34-600-987-654
  <Carlos Ruiz> +1-800-555-0199 Fifth Ave New York`
  
  findInAgenda(agenda, '34-600-123-456')
  // { name: "Juan Perez", address: "Calle Gran Via 12" }
  
  findInAgenda(agenda, '600-987')
  // { name: "Maria Gomez", address: "Plaza Mayor 45 Madrid 28013" }
  
  findInAgenda(agenda, '111')
  // null
  // Explicaci칩n: No hay resultados
  
  findInAgenda(agenda, '1')
  // null
  // Explicaci칩n: Demasiados resultados

*/

/**
 * @param {string} agenda
 * @param {string} phone
 * @returns {{ name: string, address: string } | null}
 */
function findInAgenda(agenda, phone) {
  const unorganizedContacts = agenda.split('\n')

  const extractFieldFromUnorganizedContact = (contact, startChar, endChar) => {
    const startCharIndex = contact.indexOf(startChar)
    const endCharIndex = contact.indexOf(endChar, startCharIndex)
    const field = contact.substring(startCharIndex + 1, endCharIndex !== -1 ? endCharIndex : undefined)
    const cleanedContact = (contact.substring(0, startCharIndex) + (endCharIndex !== - 1 ? contact.substring(endCharIndex + 1) : '')).trim()


    return [cleanedContact, field]
  }

  const organizedContacts = unorganizedContacts.map(contact => {
    const [cleanedPhoneContact, phone] = extractFieldFromUnorganizedContact(contact, '+', ' ')
    const [cleanedPhoneAndNameContact, name] = extractFieldFromUnorganizedContact(cleanedPhoneContact, '<', '>')

    return {
      phone,
      name,
      address: cleanedPhoneAndNameContact
    }
  })

  const search = organizedContacts
    .filter(contact => contact.phone.includes(phone))
    .map(contact => ({ name: contact.name, address: contact.address }))
  
  return search.length === 1 ? search[0] : null
}
  
